name: Build And Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies on ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cmake --version
        gcc --version

    - name: Install dependencies on macos
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install catch2
        cmake --version
        clang --version
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: JUnit Test Results (${{ matrix.os }})
        path: ${{github.workspace}}/build/test/junit_*.xml


  publish-test-results:
    name: "Publish Tests Results"
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      # only needed unless run with comment_mode: off
      pull-requests: write
      # only needed for private repository
      contents: read
      # only needed for private repository
      issues: read
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded artifact files
        run: ls -R

      - name: Publish Test Results
        # Really neat Github Action: https://github.com/marketplace/actions/publish-unit-test-results 
        # Note that the "composite" version installs packages in the python environment
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          junit_files: "artifacts/**/junit_*.xml"
